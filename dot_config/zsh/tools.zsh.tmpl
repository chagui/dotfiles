# asdf
export ASDF_CONFIG_FILE="$XDG_CONFIG_HOME/asdf/config"
export ASDF_DATA_DIR="$XDG_DATA_HOME/asdf"
{{- if eq .chezmoi.os "darwin" }}
asdf_source="$(brew --prefix asdf)/libexec/asdf.sh"
{{  else if eq .chezmoi.os "linux" }}
{{- if eq .chezmoi.osRelease.id "ubuntu" }}
asdf_source="$HOME/.asdf/asdf.sh"
{{ end -}}
{{ end }}
if [ -s "$asdf_source" ]; then
    source "$asdf_source"
fi
fpath=(${ASDF_DIR}/completions $fpath)

# delta
if which delta &>/dev/null; then
    compdef _gnu_generic delta
fi

# kubectl
if which kubectl &>/dev/null; then
    alias k='kubectl'
    alias kd='kubectl describe'
    alias ke='kubectl edit'
    alias kg='kubectl get'
    alias kl='kubectl logs'
    export KUBECACHEDIR="$XDG_CACHE_HOME/kube"
    export KUBECONFIG="$XDG_CONFIG_HOME/kube/config"
fi

# less
export LESSHISTFILE="$XDG_STATE_HOME/less/history"
export LESSKEY="$XDG_STATE_HOME/less/keys"

# mypy
export MYPY_CACHE_DIR="$XDG_CACHE_HOME/mypy"

# op
if which op &>/dev/null; then
    eval "$(op completion zsh)"
    compdef _op op
fi

# pipx
if which pipx &>/dev/null; then
    eval "$(register-python-argcomplete pipx)"
fi

# psql
export PSQLRC="$XDG_CONFIG_HOME/psql/psqlrc"
export PGPASSFILE="$XDG_CONFIG_HOME/pg/pgpass"
export PGSERVICEFILE="$XDG_CONFIG_HOME/pg/pg_service.conf"
export PSQL_HISTORY="$XDG_STATE_HOME/psql/history"

# pyenv
if which pyenv &>/dev/null; then
    export PYENV_VIRTUALENV_CACHE_PATH="$XDG_CACHE_HOME/pyenv-virtualenv"
    eval "$(pyenv init -)"
{{- if eq .chezmoi.os "darwin" }}
    # fix Brew Doctor: "Warning: "config" scripts exist outside your system or Homebrew directories"
    alias brew='env PATH=${PATH//$(pyenv root)\/shims:/} brew'
{{ end }}
    eval "$(pyenv virtualenv-init -)"
fi

# redis-cli
export REDISCLI_RCFILE="$XDG_CONFIG_HOME/rediscli/config"
export REDISCLI_HISTFILE="$XDG_STATE_HOME/rediscli/history"

# ripgrep
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/config"

# terraform
export TF_CLI_CONFIG_FILE="$XDG_CONFIG_HOME/terraform/config"
alias tf='terraform'

# wget
export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"

# zoxide
if which zoxide &>/dev/null; then
    eval "$(zoxide init zsh)"
fi
